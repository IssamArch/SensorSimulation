package SensorLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_App;
  private ConceptPresentation props_FileCsv;
  private ConceptPresentation props_FileJson;
  private ConceptPresentation props_Replay;
  private ConceptPresentation props_sensor;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.App:
        if (props_App == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_App = cpb.create();
        }
        return props_App;
      case LanguageConceptSwitch.FileCsv:
        if (props_FileCsv == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FileCsv = cpb.create();
        }
        return props_FileCsv;
      case LanguageConceptSwitch.FileJson:
        if (props_FileJson == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_FileJson = cpb.create();
        }
        return props_FileJson;
      case LanguageConceptSwitch.Replay:
        if (props_Replay == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          props_Replay = cpb.create();
        }
        return props_Replay;
      case LanguageConceptSwitch.sensor:
        if (props_sensor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("sensor");
          props_sensor = cpb.create();
        }
        return props_sensor;
    }
    return null;
  }
}
