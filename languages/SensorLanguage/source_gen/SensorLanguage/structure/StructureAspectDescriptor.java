package SensorLanguage.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptApp = createDescriptorForApp();
  /*package*/ final ConceptDescriptor myConceptFileCsv = createDescriptorForFileCsv();
  /*package*/ final ConceptDescriptor myConceptFileJson = createDescriptorForFileJson();
  /*package*/ final ConceptDescriptor myConceptReplay = createDescriptorForReplay();
  /*package*/ final ConceptDescriptor myConceptsensor = createDescriptorForsensor();
  private final LanguageConceptSwitch myConceptIndex;

  public StructureAspectDescriptor() {
    myConceptIndex = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptApp, myConceptFileCsv, myConceptFileJson, myConceptReplay, myConceptsensor);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myConceptIndex.index(id)) {
      case LanguageConceptSwitch.App:
        return myConceptApp;
      case LanguageConceptSwitch.FileCsv:
        return myConceptFileCsv;
      case LanguageConceptSwitch.FileJson:
        return myConceptFileJson;
      case LanguageConceptSwitch.Replay:
        return myConceptReplay;
      case LanguageConceptSwitch.sensor:
        return myConceptsensor;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myConceptIndex.index(c);
  }

  private static ConceptDescriptor createDescriptorForApp() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SensorLanguage", "App", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e1917cdb0L);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x4caf0310491e41f5L, 0x8a9b2006b3a94898L, 0x40c1a7cb987d20d5L);
    b.origin("r:e33051fe-2b5d-4ccc-ada4-abd98be3c743(SensorLanguage.structure)/8302915319737339312");
    b.aggregate("replay", 0x7339e17e1919e0feL).target(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e1919e069L).optional(false).ordered(true).multiple(true).origin("8302915319737475326").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFileCsv() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SensorLanguage", "FileCsv", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e19250f70L);
    b.class_(false, false, false);
    b.super_("SensorLanguage.structure.Replay", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e1919e069L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:e33051fe-2b5d-4ccc-ada4-abd98be3c743(SensorLanguage.structure)/8302915319738208112");
    b.prop("t", 0x65313129f72b45fL, "455728957999985759");
    b.prop("s", 0x65313129f72b461L, "455728957999985761");
    b.prop("v", 0x65313129f72b4aeL, "455728957999985838");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForFileJson() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SensorLanguage", "FileJson", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e19251020L);
    b.class_(false, false, false);
    b.super_("SensorLanguage.structure.Replay", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e1919e069L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:e33051fe-2b5d-4ccc-ada4-abd98be3c743(SensorLanguage.structure)/8302915319738208288");
    b.prop("t", 0x3cf05914020d6bb0L, "4391107579154885552");
    b.prop("s", 0x3cf05914020d7482L, "4391107579154887810");
    b.prop("v", 0x3cf05914020d7f89L, "4391107579154890633");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForReplay() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SensorLanguage", "Replay", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e1919e069L);
    b.class_(false, true, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:e33051fe-2b5d-4ccc-ada4-abd98be3c743(SensorLanguage.structure)/8302915319737475177");
    b.prop("source", 0x7339e17e1919e100L, "8302915319737475328");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForsensor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("SensorLanguage", "sensor", 0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7339e17e1919e158L);
    b.class_(false, false, false);
    b.origin("r:e33051fe-2b5d-4ccc-ada4-abd98be3c743(SensorLanguage.structure)/8302915319737475416");
    b.prop("name", 0x7339e17e1919e1abL, "8302915319737475499");
    b.prop("time", 0x7339e17e1919e1afL, "8302915319737475503");
    b.prop("value", 0x7339e17e1919e1b2L, "8302915319737475506");
    return b.create();
  }
}
