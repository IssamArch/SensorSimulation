package SensorLanguage.sandbox;

/*Generated by MPS */


public class map_App {
  public static void main(String[] args) {

    System.out.println("package com.polytech.unice;");
    System.out.println("import org.influxdb.InfluxDB;");
    System.out.println("import org.influxdb.InfluxDBFactory;");
    System.out.println("import org.influxdb.dto.BatchPoints;");
    System.out.println("import org.influxdb.dto.Point;");
    System.out.println("import java.util.Map;");
    System.out.println("import java.util.Random;");
    System.out.println("import java.util.concurrent.TimeUnit;");
    System.out.println("import java.util.HashMap;");
    System.out.println("import java.util.*;");

    System.out.println("public class " + "App" + " { ");

    System.out.println("// methode Send to influx Db");

    System.out.println("  public static void sendToInfluxDB(String sensorName, long timeStamp, Object value) {");
    System.out.print("       InfluxDB influxDB = InfluxDBFactory.connect(\"http://localhost:8086\", ");
    System.out.println("\"root\", \"root\");");
    System.out.println("      String dbName = \"my_database\";");
    System.out.println("      influxDB.createDatabase(dbName);");
    System.out.println("      BatchPoints batchPoints = BatchPoints");
    System.out.println("          .database(dbName)");
    System.out.println("          .consistency(InfluxDB.ConsistencyLevel.ALL)");
    System.out.println("          .build();");
    System.out.println("        Map<String, Object> map = new HashMap<>();");
    System.out.println("        map.put(sensorName, value);");
    System.out.println("        Point point = Point.measurement(sensorName)");
    System.out.println("           .time(timeStamp, TimeUnit.MILLISECONDS)");
    System.out.println("           .fields(map)");
    System.out.println("           .build();");
    System.out.println("           batchPoints.point(point);");
    System.out.println("       influxDB.write(batchPoints);");
    System.out.println("   }");

    System.out.println("public static ArrayList<String> createListSensor(int sensorsNumber){");
    System.out.println("    ArrayList<String> sensorsNames = new ArrayList<>();");
    System.out.println("    for (int i = 0; i < sensorsNumber; i++) {");
    System.out.println("       sensorsNames.add(UUID.randomUUID().toString());");
    System.out.println("    }");
    System.out.println("return sensorsNames;");
    System.out.println("}");

    System.out.println("public static void createrandomLow() {");
    System.out.println("   Thread thread = new Thread(\"Thread random\") {");
    System.out.println("      public void run(){");
    System.out.println("        System.out.println(\"run by: \" + getName());");
    System.out.println("        String name = UUID.randomUUID().toString();");
    System.out.println("        long timestamp = System.currentTimeMillis();");
    System.out.println("        int value = new Random().nextInt() % 10;");
    System.out.println("        int t=new Random().nextInt() % 10;");
    System.out.println("        System.out.println(\"value :\" + value);");
    System.out.println("        System.out.println(\"name :\"  + name);");
    System.out.println("        System.out.println(\"timestamp :\"+ timestamp);");
    System.out.println("        sendToInfluxDB(name,timestamp,value);");
    System.out.println("        try {");
    System.out.println("            Thread.sleep(5000);");
    System.out.println("        } catch (InterruptedException e) {");
    System.out.println("             e.printStackTrace();");
    System.out.println("        }");
    System.out.println("      }");
    System.out.println("   };");
    System.out.println("  thread.start();");
    System.out.println("}");



    System.out.println("  public static void main(String[] args){");
    System.out.println("    Thread thread = new Thread(\"Thread App\") {");
    System.out.println("      public void run(){");
    System.out.println("         System.out.println(\"run by: \" + getName());");

    System.out.println("         for(int t =0; t < " + 12 + ";t++){");
    System.out.println("            for(int i = 0; i < " + 12 + ";i++){");

    System.out.println("     createFileLow(" + "/home/user/" + "," + 1 + "," + 2 + "," + 3 + "," + "json" + ");");

    System.out.println("              try {");
    System.out.println("                   Thread.sleep(5000);");
    System.out.println("              } catch (InterruptedException e) {");
    System.out.println("                   e.printStackTrace();");
    System.out.println("              }");
    System.out.println("            }");
    System.out.println("          }");


    System.out.println("         for(int t =0; t < " + 44 + ";t++){");
    System.out.println("            for(int i = 0; i < " + 33 + ";i++){");

    System.out.println("              createrandomlow();");

    System.out.println("              try {");
    System.out.println("                   Thread.sleep(5000);");
    System.out.println("              } catch (InterruptedException e) {");
    System.out.println("                   e.printStackTrace();");
    System.out.println("              }");
    System.out.println("            }");
    System.out.println("          }");


    System.out.println("         for(int t =0; t < " + 1 + ";t++){");
    System.out.println("            for(int i = 0; i < " + 1 + ";i++){");

    System.out.println("     createFileLow(" + "/home/user/" + "," + 1 + "," + 2 + "," + 3 + "," + "json" + ");");

    System.out.println("              try {");
    System.out.println("                   Thread.sleep(5000);");
    System.out.println("              } catch (InterruptedException e) {");
    System.out.println("                   e.printStackTrace();");
    System.out.println("              }");
    System.out.println("            }");
    System.out.println("          }");



    System.out.println("          }");
    System.out.println("      };");
    System.out.println("thread.start();");
    System.out.println("    }");



    System.out.println("}");
  }
}
