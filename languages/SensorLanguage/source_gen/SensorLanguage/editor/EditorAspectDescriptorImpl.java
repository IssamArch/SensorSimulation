package SensorLanguage.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.EditorAspectDescriptorBase;
import org.jetbrains.annotations.NotNull;
import java.util.Collection;
import jetbrains.mps.openapi.editor.descriptor.ConceptEditor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import java.util.Collections;
import jetbrains.mps.openapi.editor.descriptor.SubstituteMenu;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class EditorAspectDescriptorImpl extends EditorAspectDescriptorBase {
  @NotNull
  public Collection<ConceptEditor> getDeclaredEditors(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0a = ((SAbstractConcept) concept);
    switch (index_xbvbvu_a0a.index(cncpt_a0a)) {
      case 0:
        return Collections.<ConceptEditor>singletonList(new CondValue_Editor());
      case 1:
        return Collections.<ConceptEditor>singletonList(new CoupleProb_Editor());
      case 2:
        return Collections.<ConceptEditor>singletonList(new FileLaw_Editor());
      case 3:
        return Collections.<ConceptEditor>singletonList(new FunctionLow_Editor());
      case 4:
        return Collections.<ConceptEditor>singletonList(new Gorilla_Editor());
      case 5:
        return Collections.<ConceptEditor>singletonList(new Markov_Editor());
      case 6:
        return Collections.<ConceptEditor>singletonList(new RandomLow_Editor());
      case 7:
        return Collections.<ConceptEditor>singletonList(new Sensor_Editor());
      case 8:
        return Collections.<ConceptEditor>singletonList(new SensorLot_Editor());
      case 9:
        return Collections.<ConceptEditor>singletonList(new State_Editor());
      case 10:
        return Collections.<ConceptEditor>singletonList(new Transition_Editor());
      default:
    }
    return Collections.<ConceptEditor>emptyList();
  }


  @NotNull
  @Override
  public Collection<SubstituteMenu> getDeclaredDefaultSubstituteMenus(SAbstractConcept concept) {
    SAbstractConcept cncpt_a0d = concept;
    switch (index_xbvbvu_a0d.index(cncpt_a0d)) {
      case 0:
        return Collections.<SubstituteMenu>singletonList(new CoupleProb_SubstituteMenu());
      case 1:
        return Collections.<SubstituteMenu>singletonList(new Sensor_SubstituteMenu());
      default:
    }
    return Collections.<SubstituteMenu>emptyList();
  }

  private static final ConceptSwitchIndex index_xbvbvu_a0a = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x345c81b7bf895e99L), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x722e15f413698b4aL), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x7a90ba9e9d2cabbL), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x30cc05d66866158L), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x500bc1d3c18d2483L), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x38148d1cef2b080aL), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0xc4fd7c06bb2ec59L), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0xc4fd7c06bb2e7f2L), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0xc4fd7c06bb2e79cL), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x722e15f413698912L), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x722e15f413698a2fL)).seal();
  private static final ConceptSwitchIndex index_xbvbvu_a0d = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0x722e15f413698b4aL), MetaIdFactory.conceptId(0x976c57d85cc4413L, 0xa01a155ebd2f878fL, 0xc4fd7c06bb2e7f2L)).seal();
}
